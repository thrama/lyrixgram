import logging
import random
import json
import httpx
from pathlib import Path
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# Enable logging
try:
    logging.basicConfig(
        filename="lyrixgram.log",
        format='%(asctime)s, %(levelname)s, %(filename)s, %(funcName)s(), %(lineno)d, %(message)s',
        level=logging.INFO
    )
except Exception as e:
    print(f"Logging setup failed: {e}")

# Set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# Read settings
settings_file = Path('.', 'confs', 'settings.json')
try:
    with open(settings_file, 'r') as json_file:
        confs = json.load(json_file)
except FileNotFoundError:
    logger.error(f"Settings file {settings_file} not found.")
    raise
except json.JSONDecodeError:
    logger.error(f"Error decoding JSON from the settings file {settings_file}.")
    raise

musixmatch_apikey = confs['credentials']['musicxmatch_apikey']
bot_token = confs['credentials']['telegrambot_token']

# Show logo
async def show_logo(update: Update) -> None:
    """Just shows the logo."""
    if random.random() < 0.2:  # Generates a 20% chance
        message = '<em>(powered by <a href="https://www.musixmatch.com/">musiXmatch</a>)</em>'
        await update.message.reply_text(
            message,
            reply_markup=ReplyKeyboardRemove()
        )

# Show results
async def show_results(update: Update, results: dict, text: str):
    """Shows the find results."""
    track_list = results["message"]["body"]["track_list"]
    count = len(track_list)

    if count > 0:
        await update.message.reply_text('*** Best result')
        for index, track in enumerate(track_list):
            track_name = track["track"]["track_name"]
            artist_name = track["track"]["artist_name"]
            track_rating = track["track"]["track_rating"]
            track_url = track["track"]["track_share_url"]

            if index == 0:
                await update.message.reply_text('***')

            await update.message.reply_text(
                f'{index + 1}) <b>{track_name}</b> - {artist_name} (rate: {track_rating}) [ <a href="{track_url}">&gt;&gt</a> ]',
                reply_markup=ReplyKeyboardRemove(),
                disable_web_page_preview=True
            )

        await update.message.reply_text(
            f'Results for <i>{text}</i>: {count} / {results["message"]["header"]["available"]}',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(f'No results found for <i>{text}</i>.')

    await show_logo(update)
    logger.info("Provided best results to user %s", update.message.from_user.first_name)  # Log

# Show lucky results
async def show_lucky_results(update: Update, results: dict):
    """Shows the luckiest result."""
    track = results["message"]["body"]["track"]
    track_name = track["track_name"]
    artist_name = track["artist_name"]
    track_url = track["track_share_url"]

    await update.message.reply_text('*** Luckiest result')
    await update.message.reply_text(
        f'<b>{track_name}</b> - {artist_name} [ <a href="{track_url}">&gt;&gt</a> ]',
        reply_markup=ReplyKeyboardRemove()
    )

    await show_logo(update)
    logger.info("Provided luckiest result to user %s", update.message.from_user.first_name)  # Log

# Error handler
def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Log errors caused by Updates."""
    logger.warning("Update %s caused error %s", update, context.error)  # Log

# Hello command
async def hello_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Say hello."""
    await update.message.reply_text(f'Hello, {update.message.from_user.first_name}!')
    logger.info("Said hello to user %s", update.message.from_user.first_name)  # Log

# Helper function to handle API errors
async def handle_api_error(update: Update, results: dict):
    error_message = 'Oops, something went wrong...'
    status_code = results["message"]["header"]["status_code"]
    if status_code == 401:
        error_message = 'AUTH ERROR: Oops, something went wrong...'
    elif status_code == 402:
        error_message = 'LIMIT ERROR: Oops, something went wrong...'
    elif status_code == 503:
        error_message = 'musiXmatch is a bit busy at the moment and your request canâ€™t be satisfied.'
    await update.message.reply_text(error_message)
    logger.debug("Error with status code %s: %s", status_code, results)  # Log

# Find all command
async def find_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Search text in the song title, artist name, or lyrics."""
    text = update.message.text.replace('/search ', '').strip()

    logging.info("User input for find_all_command: %s", text)  # Log

    if not text:
        await update.message.reply_text(f'{update.message.from_user.first_name}, enter a text to search')
    else:
        async with httpx.AsyncClient() as client:
            try:
                # Connect to the API service
                response = await client.get(
                    f'http://api.musixmatch.com/ws/1.1/track.search?apikey={musixmatch_apikey}&q={text}&s_track_rating=desc&page=1&page_size={confs["view"]["max_items"]}'
                )
                results = response.json()
                logger.debug("%s", results)  # Log
            except httpx.HTTPStatusError as err:
                logger.error("HTTP error occurred: %s", repr(err))  # Log
            except httpx.RequestError as err:
                logger.error("Request error occurred: %s", repr(err))  # Log
            else:
                if results["message"]["header"]["status_code"] == 200:  # The request was successful
                    await show_results(update, results, text)
                else:
                    await handle_api_error(update, results)

# Find by title command
async def find_by_title_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Search text in the song title."""
    text = update.message.text.replace('/title ', '').strip()

    logging.info("User input for find_by_title_command: %s", text)  # Log

    if not text:
        await update.message.reply_text(f'{update.message.from_user.first_name}, enter a text to search')
    else:
        async with httpx.AsyncClient() as client:
            try:
                # Connect to the API service
                response = await client.get(
                    f'http://api.musixmatch.com/ws/1.1/track.search?apikey={musixmatch_apikey}&q_track={text}&s_track_rating=desc&page=1&page_size={confs["view"]["max_items"]}'
                )
                results = response.json()
                logger.debug("%s", results)  # Log
            except httpx.HTTPStatusError as err:
                logger.error("HTTP error occurred: %s", repr(err))  # Log
            except httpx.RequestError as err:
                logger.error("Request error occurred: %s", repr(err))  # Log
            else:
                if results["message"]["header"]["status_code"] == 200:  # The request was successful
                    await show_results(update, results, text)
                else:
                    await handle_api_error(update, results)

# I am lucky command
async def iam_lucky_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """If you feel lucky..."""
    track_found = False

    # Loop until a track is found or the process encounters a blocking error
    while not track_found:
        async with httpx.AsyncClient() as client:
            try:
                # Generate a random number to use as track ID
                random_number = random.randint(1, 6000000)

                # Connect to the API service
                response = await client.get(
                    f'http://api.musixmatch.com/ws/1.1/track.get?apikey={musixmatch_apikey}&commontrack_id={random_number}'
                )
                results = response.json()
                logger.debug("%s", results)  # Log
            except httpx.HTTPStatusError as err:
                logger.error("HTTP error occurred: %s", repr(err))  # Log
            except httpx.RequestError as err:
                logger.error("Request error occurred: %s", repr(err))  # Log
            else:
                if results["message"]["header"]["status_code"] == 200:  # The request was successful
                    await show_lucky_results(update, results)
                    track_found = True
                else:
                    await handle_api_error(update, results)
                    break

# Main function
def main() -> None:
    """Start the bot."""
    app = Application.builder().token(bot_token).build()

    app.add_handler(CommandHandler('hello', hello_command))
    app.add_handler(CommandHandler('search', find_all_command))
    app.add_handler(CommandHandler('title', find_by_title_command))
    app.add_handler(CommandHandler('lucky', iam_lucky_command))

    app.run_polling()

if __name__ == '__main__':
    main()
